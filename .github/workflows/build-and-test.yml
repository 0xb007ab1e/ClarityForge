name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-${{ runner.os }}-${{ matrix.python-version }}-
          
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        
    - name: Install dependencies
      run: |
        poetry install --with dev
        
    - name: Code formatting check with Black
      run: |
        poetry run black --check --diff .
      continue-on-error: false
        
    - name: Import sorting check with isort
      run: |
        poetry run isort --check-only --diff .
      continue-on-error: false
        
    - name: Linting with Ruff
      run: |
        poetry run ruff check --format=github .
      continue-on-error: false
        
    - name: Type checking with mypy
      run: |
        poetry run mypy clarity_forge/ --ignore-missing-imports
      continue-on-error: true  # Allow mypy to fail until types are fully implemented
        
    - name: Security scanning with Bandit
      run: |
        poetry run bandit -r clarity_forge/ -f json -o bandit-report.json
        poetry run bandit -r clarity_forge/ -f screen
      continue-on-error: false
        
    - name: Run unit tests with coverage
      run: |
        poetry run coverage run -m pytest tests/ -v --tb=short
        poetry run coverage report --show-missing --fail-under=80
        poetry run coverage xml
      continue-on-error: false
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Run API tests
      run: |
        poetry run pytest tests/test_api.py -v --tb=short
      continue-on-error: false
        
    - name: Dependency vulnerability check
      run: |
        poetry run pip install safety
        poetry run safety check --json --output safety-report.json
        poetry run safety check
      continue-on-error: false
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: |
          coverage.xml
          bandit-report.json
          safety-report.json
          
  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Install dependencies
      run: |
        poetry install --with dev
        
    - name: Run integration tests
      run: |
        poetry run pytest tests/ -m "not unit" -v --tb=short
      continue-on-error: false
        
  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Unit tests failed. Blocking merge."
          exit 1
        fi
        if [[ "${{ needs.integration-test.result }}" == "failure" ]]; then
          echo "Integration tests failed. Blocking merge."
          exit 1
        fi
        echo "All quality checks passed."
        
    - name: Quality gate summary
      run: |
        echo "âœ… Code formatting (Black)"
        echo "âœ… Import sorting (isort)"
        echo "âœ… Linting (Ruff)"
        echo "âœ… Security scanning (Bandit)"
        echo "âœ… Unit tests with coverage â‰¥80%"
        echo "âœ… API endpoint tests"
        echo "âœ… Dependency vulnerability check"
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "âœ… Integration tests"
        fi
        echo "ðŸš€ Ready for merge!"
