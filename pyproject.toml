[tool.poetry]
name = "clarity-forge"
version = "0.1.0"
description = ""
authors = ["ClarityForge Team"]
license = "MIT"
readme = "README.md"
packages = [{include = "clarity_forge"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.115.14"
uvicorn = "^0.35.0"
click = "^8.2.1"
pydantic = "^2.11.7"


[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-asyncio = "^0.23.0"
httpx = "^0.27.0"
black = "^23.0.0"
isort = "^5.0.0"
ruff = "^0.1.0"
mypy = "^1.0.0"
bandit = "^1.7.0"
coverage = "^7.0.0"

[tool.poetry.scripts]
clarity-forge = "clarity_forge.cli:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "api: marks tests as API tests",
    "slow: marks tests as slow running",
]

[tool.coverage.run]
source = ["clarity_forge"]
omit = [
    "tests/*",
    "clarity_forge/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == '__main__':",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = [
    "S101",  # asserts allowed in tests
    "ARG",   # unused function args -> fixtures nevertheless are functionally relevant
    "FBT",   # don't care about booleans as positional arguments in tests
    "PLR2004", # magic values in tests are fine
    "S311",  # standard pseudo-random generators not suitable for security/cryptographic purposes
]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.bandit]
exclude_dirs = ["tests", ".venv"]
skips = ["B101", "B601"]
